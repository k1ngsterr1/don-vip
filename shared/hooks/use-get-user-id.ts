import { useAuthStore } from "@/entities/auth/store/auth.store";
import { apiClient } from "../config/apiClient";

export const getUserId = async (): Promise<string> => {
  if (typeof window === "undefined") {
    throw new Error("‚ùå getUserId called on server");
  }

  const { user, setUser } = useAuthStore.getState();

  const isNumber = (val: string) => /^\d+$/.test(val);

  if (user?.id && isNumber(user.id.toString())) {
    console.log("‚úÖ [Auth] user.id —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:", user.id);
    return user.id.toString();
  }

  console.log("üîç [Auth] user.id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. user:", user);

  try {
    console.log("üåê [Auth] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å GET /user/me...");
    const currentUser = await apiClient.get("/user/me");
    const fetchedUser = currentUser.data;

    console.log("üì• [Auth] –û—Ç–≤–µ—Ç –æ—Ç /user/me:", fetchedUser);

    if (fetchedUser?.id && isNumber(fetchedUser.id.toString())) {
      setUser(fetchedUser);
      console.log("‚úÖ [Auth] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", fetchedUser.id);
      return fetchedUser.id.toString();
    } else {
      console.warn(
        "‚ö†Ô∏è [Auth] –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user.id –æ—Ç /user/me:",
        fetchedUser?.id
      );
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è [Auth] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /user/me:", err);
  }

  try {
    console.log("üÜï [GuestAuth] –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    const res = await apiClient.post("/auth/guest");
    const guestUser = res.data;

    console.log("üì• [GuestAuth] –û—Ç–≤–µ—Ç –æ—Ç /auth/guest:", guestUser);

    if (guestUser?.id && isNumber(guestUser.id.toString())) {
      setUser(guestUser);
      console.log("üë§ [GuestAuth] –ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å id:", guestUser.id);
      return guestUser.id.toString();
    } else {
      console.error("‚ùå [GuestAuth] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π guestUser.id:", guestUser?.id);
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ—Å—Ç—è");
    }
  } catch (error) {
    console.error("‚ùå [GuestAuth] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç—è:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
};
