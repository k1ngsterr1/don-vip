"use client";

import reactQueryClient from "@/shared/config/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { type ReactNode, useEffect } from "react";
import { apiClient } from "@/shared/config/apiClient";
import { useAuthStore } from "@/entities/auth/store/auth.store";

interface ClientLayoutProps {
  children: ReactNode;
}

const ClientLayout = ({ children }: ClientLayoutProps) => {
  const { user, setUser, setTokens, isAuthenticated } = useAuthStore();

  useEffect(() => {
    const checkGuestUser = async () => {
      console.log("üü° [GuestAuth] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");

      const authStorage = localStorage.getItem("auth-storage");

      // ‚úÖ –ï—Å–ª–∏ auth-storage —É–∂–µ –µ—Å—Ç—å ‚Äî —É–¥–∞–ª–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π userId
      if (authStorage && localStorage.getItem("userId")) {
        console.log(
          "üßπ [GuestAuth] –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π userId –∏–∑ localStorage..."
        );
        localStorage.removeItem("userId");
      }

      if (isAuthenticated || user) {
        console.log("‚úÖ [GuestAuth] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user);
        return;
      }

      if (!authStorage) {
        console.log("üÜï [GuestAuth] –ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...");

        try {
          const response = await apiClient.post("/auth/guest");

          console.log("üì• [GuestAuth] –û—Ç–≤–µ—Ç –æ—Ç API:", response.data);

          const { user: guestUser, accessToken, refreshToken } = response.data;

          setUser(guestUser);
          setTokens(accessToken, refreshToken);

          console.log("‚úÖ [GuestAuth] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–æ–∫–µ–Ω—ã.");
        } catch (error) {
          console.error("‚ùå [GuestAuth] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç—è:", error);
        }
      }
    };

    checkGuestUser();
  }, [isAuthenticated, user, setUser, setTokens]);

  return (
    <QueryClientProvider client={reactQueryClient}>
      {children}
    </QueryClientProvider>
  );
};

export default ClientLayout;
