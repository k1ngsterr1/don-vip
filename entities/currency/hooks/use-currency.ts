import { useState, useEffect } from "react";

export interface Currency {
  code: string;
  name: string;
  symbol: string;
  flag: string;
  exchangeRate: number; // –ö—É—Ä—Å –∫ RUB
}

export const AVAILABLE_CURRENCIES: Currency[] = [
  {
    code: "RUB",
    name: "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
    symbol: "‚ÇΩ",
    flag: "üá∑üá∫",
    exchangeRate: 1,
  },
  {
    code: "USD",
    name: "–î–æ–ª–ª–∞—Ä –°–®–ê",
    symbol: "$",
    flag: "üá∫üá∏",
    exchangeRate: 0.011, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
  },
  {
    code: "EUR",
    name: "–ï–≤—Ä–æ",
    symbol: "‚Ç¨",
    flag: "üá™üá∫",
    exchangeRate: 0.01, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
  },
  {
    code: "BRL",
    name: "–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª",
    symbol: "R$",
    flag: "üáßüá∑",
    exchangeRate: 0.055, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
  },
];

const DEFAULT_CURRENCY = AVAILABLE_CURRENCIES[0]; // RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const CURRENCY_STORAGE_KEY = "selectedCurrency";

export function useCurrency() {
  const [currentCurrency, setCurrentCurrency] =
    useState<Currency>(DEFAULT_CURRENCY);
  const [isLoading, setIsLoading] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeCurrency = () => {
      try {
        const savedCurrencyCode = localStorage.getItem(CURRENCY_STORAGE_KEY);

        if (savedCurrencyCode) {
          const foundCurrency = AVAILABLE_CURRENCIES.find(
            (c) => c.code === savedCurrencyCode
          );

          if (foundCurrency) {
            setCurrentCurrency(foundCurrency);
          } else {
            // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            setCurrentCurrency(DEFAULT_CURRENCY);
            localStorage.setItem(CURRENCY_STORAGE_KEY, DEFAULT_CURRENCY.code);
          }
        } else {
          // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          setCurrentCurrency(DEFAULT_CURRENCY);
          localStorage.setItem(CURRENCY_STORAGE_KEY, DEFAULT_CURRENCY.code);
        }
      } catch (error) {
        console.error("Error loading currency from localStorage:", error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setCurrentCurrency(DEFAULT_CURRENCY);
        localStorage.setItem(CURRENCY_STORAGE_KEY, DEFAULT_CURRENCY.code);
      } finally {
        setIsLoading(false);
      }
    };

    initializeCurrency();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã
  const setCurrency = (currency: Currency) => {
    try {
      setCurrentCurrency(currency);
      localStorage.setItem(CURRENCY_STORAGE_KEY, currency.code);
    } catch (error) {
      console.error("Error saving currency to localStorage:", error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã
  const convertPrice = (
    priceInRub: number,
    targetCurrency?: Currency
  ): number => {
    const target = targetCurrency || currentCurrency;
    return priceInRub * target.exchangeRate;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  const formatPrice = (
    priceInRub: number,
    targetCurrency?: Currency
  ): string => {
    const target = targetCurrency || currentCurrency;
    const convertedPrice = convertPrice(priceInRub, target);

    return `${convertedPrice.toFixed(2)} ${target.symbol}`;
  };

  return {
    currentCurrency,
    setCurrency,
    availableCurrencies: AVAILABLE_CURRENCIES,
    convertPrice,
    formatPrice,
    isLoading,
  };
}
